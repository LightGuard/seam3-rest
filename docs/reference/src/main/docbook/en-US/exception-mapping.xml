<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="rest.exception.mapping">
	<title>Exception Handling</title>

	<para>
		The JAX-RS specification defines Exception Mapping Providers as a
		standard mechanism for treating Java exceptions.
		The Seam REST module
		comes with and alternative approach which is more consistent with the
		CDI programming model, easier to use and still portable.
	</para>
	
	<para>
		Firstly, Seam
		Catch is plugged in
		which allows exceptions that occur in
		different
		parts of an application to be treated uniformly. Besides,
		a
		builtin
		exception handler is provided which enables simple exception-mapping
		rules to be defined declaratively. 
	</para>

	<sect1>
		<title>Seam Catch Integration</title>
		<para>
			Seam Catch can be used within the Seam REST module for dealing with
			exceptions.
			As a result, an exception that occurs during an invocation
			of a JAX-RS service is routed through the Catch
			exception handling
			mechanism which is similar to the CDI event bus and lets exception
			handling logic to be
			implemented in a loosely-coupled fashion.  
		</para>

		<para>
			The following code sample demonstrates a simple exception handler
			that converts the
			<literal>NoResultException</literal>
			exception to the 404 HTTP response.
		</para>

		<example>
			<title>Seam Catch Integration - NoResultException handler</title>
			<programlistingco>
				<areaspec>
					<area id="handler-handlesexceptions" coords="1" />
					<area id="handler-inject" coords="5" />
					<area id="handler-method" coords="7" />
				</areaspec>
				<programlisting role="JAVA"><![CDATA[@HandlesExceptions
public class ExceptionHandler
{
   @Inject @RestResource
   ResponseBuilder builder
   
   public void handleException(@Handles @RestRequest CaughtException<NoResultException> event)
   {
      builder.status(404).entity("The requested resource does not exist.");
   }
}]]></programlisting>
				<calloutlist>
					<callout arearefs="handler-handlesexceptions">
						<para>
							The
							<literal>@HandlesExceptions</literal>
							annotation marks the
							<literal>ExceptionHandler</literal>
							bean
							as capable of handling exceptions.
						</para>
					</callout>
					<callout arearefs="handler-inject">
						<para>
							The
							<literal>ResponseBuilder</literal>
							for creating the HTTP response is injected.
						</para>
					</callout>
					<callout arearefs="handler-method">
						<para>
							A method for hanling
							<literal>NoResultException</literal>
							instances. Note that the
							<literal>ExceptionHandler</literal>
							can define multiple exception handling methods for various
							exception types.
						</para>
					</callout>
				</calloutlist>
			</programlistingco>
		</example>

		<para>
			Similarly to the CDI event bus, exceptions to be handled by a handler
			method can be filtered by qualifiers. In the example above, we
			are
			only interested in exceptions that occur in a JAX-RS service
			invocation. (As opposed to all exceptions of the given type that
			occur in the application - in the view layer for example.) Thus, the
			<literal>@RestRequest</literal>
			qualifier is used.
		</para>

		<para>
			Catch integration is optional and only enabled when Catch libraries are available on classpath. 
			For more information on Seam Catch, see
			<ulink
				url="http://docs.jboss.org/seam/3/catch/latest/reference/en-US/html/">Seam Catch reference documentation</ulink>
			.
		</para>
	</sect1>

	<sect1>
		<title>Declarative Exception Mapping</title>
		<para>
			Often, exception-mapping rules are simple. Thus,
			they do not
			really need to be implemented in Java.
			Instead, declarative approach
			is
			more
			appropriate in these situations. The Seam
			REST module allows
			exception types to be
			bound to
			HTTP responses
			declaratively.
	</para>

		<para>
			For each exception type, it is possible to specify the status
			code and the error message of the HTTP response.
			There are two ways of
			exception mapping configuration in Seam REST. 
	</para>

		<sect2>
			<title>Programmatic configuration</title>
			<para>
				Seam REST exception mapping can be configured from Java code.
				Firstly, create an
				<literal>ExceptionMappingConfiguration</literal>
				subclass which
				<literal>@Specializes</literal>
				the provided one. Then, implement a
				<literal>@PostConstruct</literal>
				-annotated
				method in which the
				<literal>ExceptionMapping</literal>
				definitions are added as shown in the following example.
			</para>

			<example>
				<title>Programmatic exception mapping configuration</title>
				<programlisting role="JAVA"><![CDATA[@Specializes
public class CustomExceptionMappingConfiguration extends ExceptionMappingConfiguration {
{
	@PostConstruct
	public void setup()
	{
    	addExceptionMapping(new ExceptionMapping(NoResultException.class, 404, "Requested resource does not exist."));
		addExceptionMapping(new ExceptionMapping(IllegalArgumentException.class, 400, "Illegal parameter value."));
	}
}]]></programlisting>
			</example>

			<table>
				<title>ExceptionMapping properties</title>
				<tgroup cols='4'>
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Required</entry>
							<entry>Default value</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>exceptionType</entry>
							<entry>true</entry>
							<entry>-</entry>
							<entry>Fully-qualified class name of the exception class</entry>
						</row>
						<row>
							<entry>statusCode</entry>
							<entry>true</entry>
							<entry>-</entry>
							<entry>HTTP status code</entry>
						</row>
						<row>
							<entry>message</entry>
							<entry>false</entry>
							<entry>-</entry>
							<entry>Error message sent within the HTTP response</entry>
						</row>
						<row>
							<entry>interpolateMessageBody</entry>
							<entry>false</entry>
							<entry>true</entry>
							<entry>Enables/Disables EL interpolation of the error message
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect2>

		<sect2>
			<title>XML configuration</title>
			<para>
				An alternative and more practical way of configuration is to use
				the
				Seam XML module to configure the
				<literal>ExceptionMappingConfiguration</literal>
				and
				<literal>ExceptionMapping</literal>
				classes in XML.
			</para>
			<para>
				Firstly, the Seam XML module needs to be added to the
				application. If
				using maven, this can be done by specifying the
				following dependency:
		</para>

			<example>
				<title>Seam XML dependency added to the pom.xml file.</title>
				<programlisting role="XML"><![CDATA[<dependency> 
	<groupId>org.jboss.seam.xml</groupId> 
	<artifactId>seam-xml-config</artifactId> 
	<version>${seam.xml.version}</version> 
</dependency>]]></programlisting>
			</example>

			<para>
				For more information on the seam-xml module, refer to the
				<ulink
					url="http://docs.jboss.org/seam/3/xml-config/latest/reference/en-US/html_single/">Seam XML reference documentation</ulink>
				Once the Seam XML module is added, specify the configuration in the
				<literal>seam-beans.xml</literal>
				file, located in the
				<literal>WEB-INF</literal>
				or
				<literal>META-INF</literal>
				folder of the web archive.
			</para>

			<example>
				<title>Exception mapping configuration in seam-beans.xml</title>
				<programlisting role="XML"><![CDATA[<exceptions:ExceptionMappingConfiguration>
	<s:replaces/>
	<exceptions:exceptionMappings>
		<s:value>
			<exceptions:ExceptionMapping exceptionType="javax.persistence.NoResultException" statusCode="404">
				<exceptions:message>Requested resource does not exist.</exceptions:message>
			</exceptions:ExceptionMapping>
		</s:value>
		<s:value>
			<exceptions:ExceptionMapping exceptionType="java.lang.IllegalArgumentException" statusCode="400">
				<exceptions:message>Illegal parameter value.</exceptions:message>
			</exceptions:ExceptionMapping>
		</s:value>
	</exceptions:exceptionMappings>
</exceptions:ExceptionMappingConfiguration>]]></programlisting>
			</example>

			<para>
				Furthermore, EL expressions can be used in message templates to
				provide dynamic and more descriptive error messages.
		</para>
			<example>
				<title>Exception mapping configuration in seam-beans.xml</title>
				<programlisting role="XML"><![CDATA[<exceptions:ExceptionMapping exceptionType="javax.persistence.NoResultException" statusCode="404">
	<exceptions:message>Requested resource with id #{pathParameters['id']} does not exist.</exceptions:message>
</exceptions:ExceptionMapping>]]></programlisting>
			</example>
		</sect2>

		<sect2>
			<title>Exception Mapping</title>
			<para>
				When an exception occurs at runtime, the
				<literal>SeamExceptionMapper</literal>
				first looks for a matching
				<literal>ExceptionMapping</literal>
				.
				If it finds one, it creates an HTTP response with the specified
				status
				code and error message.
			</para>
			<para>
				The error message is marshalled within a JAXB object. As a
				result, the
				error message is available in multiple media formats. The
				most commonly used formats are XML and JSON. Most JAX-RS
				implementations
				provide media
				providers for both of these formats. In
				addition, the error message
				is
				also available in plain text.
		</para>

			<example>
				<title>Sample HTTP response</title>
				<programlisting role="XML"><![CDATA[HTTP/1.1 404 Not Found
Content-Type: application/xml
Content-Length: 123
		
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<error>
	<message>Requested resource does not exist.</message>
</error>]]></programlisting>
			</example>
		</sect2>
	</sect1>
</chapter>

